rails3.

- check nested indexed facet queries
- integration with postgresql crontab
- test harness: unindexed / indexed for same test

- optimize count query: (a) empty base query      DONE
                        (b) join masks rather than looping  NOT NECESSARY

- working on rails 3.0.1?
- push compiled gems to gemcutter
- citizens example                                DONE
- final level of nested faceting ~1 value         DONE
- birth_decade has a null value                   DONE
- sorting extension facet example not working     DONE
- cannot refine on null values in facets          KNOWN ISSUE
- final level of nested faceting ~1 value         DONE
- birth_decade has a null value                   DONE

- README
  * declaring facets
  * faceting db api
  * installing postgresql extensions
  * migrations for indexing
  * updating indices (a) postgresql-crontab (b) rake crontab
- generate routes that don't conflict with resource routes (rails thinks /nobelists/results is the nobelist named 'results')
- FAQ
  * "not grouped error"
  * migrations and facet decls
  * facet plugin registration (and multiple claims)

- get rid of annoying load warnings on test

- indexed nested facet widget not working         DONE
- factor out facet functionality from relation    DONE
- not obeying orders for synthesized facets       DONE
- auto-generated groups scan all joined tables    NOT NECESSARY
- allow facet defs in method bodies               KNOWN ISSUE RAILS 3

- calculated relations conflict with table names  DONE
- pluggable facet implementations                 DONE
- results from indexes                            DONE
- nested faceting not working                     DONE
- remove mysql references in test suite           DONE

- run all tests indexed and unindexed             DONE
- migrations for facet indexes                    DONE
- indexed counts                                  DONE
- mix indexed and non-indexed                     DONE

- test cases running in 'training wheels' mode    DONE
- controller mixin with counts/results            DONE
- routes extensions                               DONE

- get ride of annoying load warnings			  DONE - MUST REDO

- get core examples working                       DONE
- 'training wheels' using plain-jane SQL          DONE

- facets should inherit scope                     DONE

- install procedure for new app
  * arrange to load without a generator/config file         DONE
  * check rake tasks load when installed in an app          DONE

- system for checking presence of indexes         DONE
- adapter for running indexed counts/queries      DONE

- sort mode option built in to widget           NOT TO DO
- minimum option built in to widget             NOT TO DO
- widgets multiplex calls to count              NOT TO DO

- rake task to update all indices               NOT TO DO
- rake task to verify all indices               NOT TO DO

- mysql for 'training wheels'                   NOT TO DO
- mysql adapter for indexing                    NOT TO DO

- rake task to install postgresql extensions                DONE

- new method: relation.facet[:name] ...  finds the facet relation, merges with current one, and returns result          DONE
- sorting defaults                                          NOT TO DO
- prettier output for raw facet relations in to_s           NOT TO DO [ db dependent ]


Changes in this version

- the 'type' parameter, which cast facet values to a given type, is gone
- query execution is delayed until results are wanted
- type specific formatters


KNOWN PROBLEMS.

-- none at the moment


DESIRED FEATURES / IMPROVEMENTS.

-- "training-wheels" mode using SQL group statements instead of bitsets
-- migrations using DM facet declarations

-- clean up sql generation in postgres adapter  DONE
-- determine exact memory requirements of postgres scalability example  DONE
-- optimise queries up to 1,000,000 scalability target DONE

-- modify widgets to multiplex ajax calls to work around 2 call limit in many browsers
   [ design: fetch() queues ajax calls; update() implementations request queue and merge current webservice call with
             ones already in the queue.  on controller side, receive multiple facet names, iterate, and bundle.  fetch()
             then unbundles the results can dispatches them to appropriate callbacks ]
